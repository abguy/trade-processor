#!/usr/bin/env node

var path = require('path');
var redis = require('redis');
var _ = require('underscore');

var env = process.env.NODE_ENV || 'production';
var config = require(path.join(__dirname, '..', 'config', 'config.json'))[env];

var debugModule = require('debug');
config.logging && debugModule.enable('socket');
var debug = debugModule('socket');

var socketPort = parseInt(config.socketPort, 10);

var redisPort = parseInt(config.redisPort, 10);
var redisClient = redis.createClient(redisPort, config.redisHost);
redisClient.on('error', function (err) {
    console.log('Redis connection error: ' + err);
});
var redisSubscriber = redis.createClient(redisPort, config.redisHost);
redisSubscriber.on('error', function (err) {
    console.log('Redis subscriber error: ' + err);
});

var clientsData = {};

var io = require('socket.io')(socketPort);
io.on('connection', function(socket) {
    debug('A user connected %s', socket.id);
    clientsData[socket.id] = new StorageData();
    loadData(function(data) {
        updateSocketData(socket, data, clientsData[socket.id]);
    });

    socket.on('disconnect', function() {
        delete clientsData[socket.id];
        debug('A user disconnected %s', socket.id);
    });
});

var StorageData = function() {
    this.batch = 0;
    this.messages = 0;
    this.currencies = [];
    this.countries = {};
    this.flows = [];
};

function loadData(onLoad) {
    redisClient.multi()
        .get('batch')
        .get('messages')
        .smembers('currencies')
        .hgetall('countries')
        .hgetall('flows')
        .exec(function (err, replies) {
            if (err) {
                console.log('Unable to load data from redis: ' + err);
                return;
            }

            var data = new StorageData();

            data.batch = parseInt(replies[0], 10);
            data.messages = parseInt(replies[1], 10);
            data.currencies = replies[2];

            var countries = replies[3];
            for (var country in countries) {
                if (!countries.hasOwnProperty(country)) {
                    continue;
                }

                countries[country] = parseInt(countries[country], 10);
            }
            data.countries = countries;

            var flows = replies[4];
            for (var flowKey in flows) {
                if (!flows.hasOwnProperty(flowKey)) {
                    continue;
                }

                flows[flowKey] = parseFloat(flows[flowKey], 10);
            }
            data.flows = flows;

            onLoad(data);
        });
}

function updateSocketData(socket, newData, initialData) {
    var sendData = new StorageData();

    var oldBatch = initialData.batch;
    ['batch', 'messages', 'currencies'].forEach(function(key) {
        sendData[key] = initialData[key] = newData[key];
    });

    sendData.countries = _.omit(newData.countries, function(value, country) {
        return initialData.countries[country] === value;
    });
    initialData.countries = newData.countries;

    var flowsToSend = _.omit(newData.flows, function(value, flowKey) {
        return initialData.flows[flowKey] === value;
    });
    initialData.flows = newData.flows;
    for (flowKey in flowsToSend) {
        if (!flowsToSend.hasOwnProperty(flowKey)) {
            continue;
        }

        var info = flowKey.split(':');
        if (info.length < 3) {
            console.log('Wrong flow key: ' + flowKey);
            continue;
        }
        if ('to' == info[1]) {
            // We will fetch it by the ':from:' key
            continue;
        }
        var toKey = info[0] + ':to:' + info[2];
        if (!newData.flows.hasOwnProperty(toKey)) {
            console.log('Unable to find flow  with key: ' + toKey);
            continue;
        }
        sendData.flows.push({
            source: info[0],
            target: info[2],
            from: newData.flows[flowKey],
            to: newData.flows[toKey]
        });
    }

    var fromRate = (config.lastRatesNumber > newData.batch)
        ? oldBatch
        : (config.lastRatesNumber > newData.batch - oldBatch ? 0 : config.lastRatesNumber - newData.batch + oldBatch);
    ['GBP', 'USD', 'CAD', 'AUD'].forEach(function(currency) {
        // todo@ rates are not implemented yet
        return;
        if (!_.contains(initialData.currencies, currency)) {
            return;
        }
        var key = 'rates:' + currency + ':EUR';
        redisClient.lrange(key, fromRate, -1, function (err, rates) {
            if (rates.length < 1) {
                return;
            }
            var data = {};
            data[currency] = rates;
            debug('Send rates to %s', socket.id);
            socket.emit('message', { "rates": data});
        });
    });

    debug('Send data to %s', socket.id);
    debug(sendData);
    socket.emit('message', sendData);
}

redisSubscriber.on('message', _.throttle(function (channel, message) {
    if ('reset' == message) {
        io.nsps['/'].sockets.forEach(function(socket) {
            delete clientsData[socket.id];
            clientsData[socket.id] = new StorageData();
            debug('Reset %s', socket.id);
            socket.emit('reset');
        });
        return;
    }

    loadData(function(data) {
        io.nsps['/'].sockets.forEach(function(socket) {
            updateSocketData(socket, data, clientsData[socket.id]);
        });
    });
}, config.minSockeUpdateDelay, { trailing: true }));

redisSubscriber.subscribe(config.redisChannel);
